from faker import Faker
import random

# Initialize the Faker library
fake = Faker()

# Set the number of entries to generate
num_entries = 1000

# List of customers
"""
Extract customer id with the sentence
select c.customer_id from clothing_store.customers c 
"""
customer_id = [1719,	9427,	4404,	8506,	7117,	1558,	8936,	9828,	8632,	2043,	
               2507,	8326,	9978,	1632,	2545,	9208,	6749,	5939,	6276,	7132,	
               8963,	9025,	1765,	8921,	3163,	2683,	5941,	5547,	6120,	1006,	
               8224,	9426,	2921,	8019,	2930,	5654,	7503,	5519,	5816,	8375,	
               9666,	9193,	7082,	8877,	1711,	2404,	8031,	9212,	8829,	3645,	
               5047,	8728,	7605,	6996,	5455,	8566,	1271,	6957,	7868,	1787,	
               3173,	4697,	8328,	8055,	1987,	5270,	9902,	4408,	3898,	6845,	
               7415,	5479,	5412,	7938,	6401,	6403,	5177,	5086,	1112,	2185,	
               8648,	5793,	9161,	4454,	6242,	8827,	3524,	6336,	3816,	8843,	
               5908,	9957,	2221,	5849,	4896,	8423,	2998,	2434,	9884,	9094,	
               1063,	9279,	7580,	8154,	6748,	3327,	8229,	2511,	5959,	6546,	
               4975,	9283,	3106,	5059,	6161,	4490,	5136,	4064,	2170,	1745,	
               8639,	3087,	5526,	5228,	2101,	7652,	4817,	4773,	5893,	4307,	
               8524,	9850,	5579,	3526,	8082,	1534,	6094,	8308,	9885,	2116,	
               8652,	1243,	8911,	5748,	6506,	8761,	6337,	4717,	9167,	8674,	
               7204,	2555,	5197,	7593,	3753,	1539,	8803,	9446,	7606,	3872,	
               4143,	7702,	2680,	4148,	2494,	3620,	6440,	1472,	3404,	2948,	
               9906,	7930,	3663,	6833,	9890,	3488,	2273,	3704,	3993,	9198,	
               7517,	8389,	8718,	9255,	1959,	2197,	8452,	7396,	7671,	8551,	
               7228,	6884,	9286,	4692,	7967,	4421,	8884,	9489,	5746,	8493,	
               3947,	6910,	6844,	5433,	4071,	9863,	3971,	6956,	2541,	3000,	
               5219,	8208,	9477,	2274,	5382,	1675,	5618,	9600,	7825,	1050,	
               3989,	8805,	9274,	9443,	5994,	9832,	6831,	4117,	6458,	2985,	
               8351,	2048,	8234,	7684,	6416,	9429,	2966,	3938,	8854,	2682,	
               1195,	8753,	6726,	2789,	7256,	7435,	5578,	6927,	5130,	8140,	
               9620,	7467,	2104,	5066,	6399,	7835,	1045,	6972,	3313,	3233,	
               2826,	3287,	4236,	5386,	7556,	4743,	3976,	7737,	2154,	9715,	
               3115,	6102,	3216,	8318,	2070,	5964,	4225,	8427,	7541,	1163,	
               3181,	2955,	2568,	4423,	9348,	9944,	1374,	5511,	1495,	2694,	
               5103,	1728,	7383,	3447,	8247,	1580,	1037,	1731,	5331,	1826,	
               1335,	6350,	3481,	3809,	2067,	8559,	2026,	6928,	9731,	8779,	
               2438,	1354,	7079,	6048,	8784,	6461,	9202,	4114,	4964,	8426,	
               9891,	3542,	1521,	3086,	6214,	7608,	4658,	4648,	1043,	9616,	
               2367,	5058,	4953,	3546,	2825,	3341,	5190,	4885,	9999,	5178,	
               5791,	5411,	6543,	6201,	2166,	3544,	5019,	1642,	5765,	3142,	
               8357,	7149,	8240,	6974,	5792,	5062,	9017,	6115,	3219,	5660,	
               7231,	9789,	9009,	5127,	6607,	2764,	5813,	9390,	6395,	3766,	
               1783,	1537,	1877,	9075,	9465,	1467,	6475,	7198,	5381,	4727,	
               8902,	2387,	3923,	6459,	7145,	3996,	3768,	4974,	3511,	9110,	
               5041,	2331,	9152,	5956,	2765,	1411,	1170,	5129,	6128,	3207,	
               9510,	1695,	7883,	9854,	5215,	7809,	8975,	6389,	3396,	3586,	
               2458,	7846,	7486,	9417,	1500,	2549,	9438,	1157,	4479,	6900,	
               8905,	3013,	6007,	8119,	6760,	5337,	9423,	6518,	8799,	8617,	
               3149,	7833,	2315,	1637,	3456,	8956,	1970,	7452,	8480,	6636,	
               6139,	9297,	4526,	8380,	6555,	3047,	6251,	4272,	7196,	9934,	
               7183,	5296,	3246,	5003,	7950,	5699,	2656,	3413,	8592,	8581,	
               6945,	1437,	1571,	3616,	2922,	7432,	6941,	4411,	5927,	8771,	
               9881,	7661,	8785,	5428,	3293,	7752,	2425,	6639,	4133,	4029,	
               7834,	9499,	7070,	2551,	4785,	6153,	4904,	3439,	5594,	1176,	
               1480,	7468,	2524,	9352,	2317,	6593,	9790,	7581,	5942,	3673]

order_status = ["Paid", "Unpaid"]

# Generate unique data in advance
unique_order_ids = random.sample(range(1000, 9999), num_entries)  # Unique order IDs
unique_customer_ids = [random.choice(customer_id) for _ in range(num_entries)]
unique_dates = [fake.date_between(start_date='-10y', end_date='today') for _ in range(num_entries)]
unique_totals = [round(random.uniform(10, 500), 2) for _ in range(num_entries)]
unique_statuses = [random.choice(order_status) for _ in range(num_entries)]

# Combine the data into orders
orders = [
    (unique_order_ids[i], unique_customer_ids[i], unique_dates[i], unique_totals[i], unique_statuses[i])
    for i in range(num_entries)
]

# Print the data in SQL format
print("INSERT INTO clothing_store.orders (order_id, customer_id, order_date, total, status) VALUES")
values = ",\n".join(
    [f"    ({p[0]}, {p[1]}, '{p[2]}', {p[3]}, '{p[4]}')" for p in orders]
)
print(values + ";")
